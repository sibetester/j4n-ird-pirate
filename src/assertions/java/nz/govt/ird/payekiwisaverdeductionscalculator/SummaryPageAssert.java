package nz.govt.ird.payekiwisaverdeductionscalculator;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link SummaryPage} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SummaryPageAssert extends AbstractAssert<SummaryPageAssert, SummaryPage> {

    /**
     * Creates a new <code>{@link SummaryPageAssert}</code> to make assertions on actual SummaryPage.
     *
     * @param actual the SummaryPage we want to make assertions on.
     */
    public SummaryPageAssert(SummaryPage actual) {
        super(actual, SummaryPageAssert.class);
    }

    /**
     * An entry point for SummaryPageAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(mySummaryPage)</code> and get specific assertion with code completion.
     *
     * @param actual the SummaryPage we want to make assertions on.
     * @return a new <code>{@link SummaryPageAssert}</code>
     */
    public static SummaryPageAssert assertThat(SummaryPage actual) {
        return new SummaryPageAssert(actual);
    }

    /**
     * Verifies that the actual SummaryPage's calculationPAYE is equal to the given one.
     *
     * @param calculationPAYE the given calculationPAYE to compare the actual SummaryPage's calculationPAYE to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's calculationPAYE is not equal to the given one.
     */
    public SummaryPageAssert hasCalculationPAYE(String calculationPAYE) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting calculationPAYE of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCalculationPAYE = actual.getCalculationPAYE();
        if (!Objects.areEqual(actualCalculationPAYE, calculationPAYE)) {
            failWithMessage(assertjErrorMessage, actual, calculationPAYE, actualCalculationPAYE);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's name is equal to the given one.
     *
     * @param name the given name to compare the actual SummaryPage's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's name is not equal to the given one.
     */
    public SummaryPageAssert hasName(String name) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's payAmount is equal to the given one.
     *
     * @param payAmount the given payAmount to compare the actual SummaryPage's payAmount to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's payAmount is not equal to the given one.
     */
    public SummaryPageAssert hasPayAmount(String payAmount) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting payAmount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPayAmount = actual.getPayAmount();
        if (!Objects.areEqual(actualPayAmount, payAmount)) {
            failWithMessage(assertjErrorMessage, actual, payAmount, actualPayAmount);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's payFrequency is equal to the given one.
     *
     * @param payFrequency the given payFrequency to compare the actual SummaryPage's payFrequency to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's payFrequency is not equal to the given one.
     */
    public SummaryPageAssert hasPayFrequency(String payFrequency) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting payFrequency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPayFrequency = actual.getPayFrequency();
        if (!Objects.areEqual(actualPayFrequency, payFrequency)) {
            failWithMessage(assertjErrorMessage, actual, payFrequency, actualPayFrequency);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's referenceNumber is equal to the given one.
     *
     * @param referenceNumber the given referenceNumber to compare the actual SummaryPage's referenceNumber to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's referenceNumber is not equal to the given one.
     */
    public SummaryPageAssert hasReferenceNumber(String referenceNumber) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting referenceNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualReferenceNumber = actual.getReferenceNumber();
        if (!Objects.areEqual(actualReferenceNumber, referenceNumber)) {
            failWithMessage(assertjErrorMessage, actual, referenceNumber, actualReferenceNumber);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's taxCode is equal to the given one.
     *
     * @param taxCode the given taxCode to compare the actual SummaryPage's taxCode to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's taxCode is not equal to the given one.
     */
    public SummaryPageAssert hasTaxCode(String taxCode) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting taxCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTaxCode = actual.getTaxCode();
        if (!Objects.areEqual(actualTaxCode, taxCode)) {
            failWithMessage(assertjErrorMessage, actual, taxCode, actualTaxCode);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SummaryPage's deductionPercentage is equal to the given one.
     *
     * @param deductionPercentage the given deductionPercentage to compare the actual SummaryPage's payAmount to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SummaryPage's payAmount is not equal to the given one.
     */
    public SummaryPageAssert hasDeductionPercentage(String deductionPercentage) {
        // check that actual SummaryPage we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting deductionPercentage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDeductionPercentage = actual.getDeductionPercentage();
        if (!Objects.areEqual(actualDeductionPercentage, deductionPercentage)) {
            failWithMessage(assertjErrorMessage, actual, deductionPercentage, actualDeductionPercentage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
